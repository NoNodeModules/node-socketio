socket.on('newLocationMessage', function(message) {
    console.log("newMessage", message);
    let li = document.createElement('li');
    let a = document.createElement('a');
    li.innerText = `${message.from}:${message.text}`;
    a.setAttribute('target', '_blank')
    a.setAttribute('href', message.url)
    a.innerHTML = "My Current Location";
    li.appendChild(a);
    document.querySelector('body').appendChild(li);
});

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=no">
    <link rel="shortcut icon" href="#">
    <link rel="stylesheet" href="/css/styles.css">

    <title></title>
</head>

<body class="chat">

    <div class="chat_sidebar">
        <h3>People</h3>
        <div class="users"></div>
    </div>
    <div class="chat_main">
        <l1 id="messages" class="chat_messages"></l1>
        <div class="class_footer">
            <form id="message-form">
                <input type="text" name="message" placeholder="message">
                <button type="submit" id="submit-btn">Submit</button>
            </form>
            <button type="button" id="send-location">Send location</button>
        </div>
    </div>
    <script type="text/template" id="message-template">
        <li class="message">
            <div class="message_title">
                <h4>
                    {{from}}
                </h4>
                <span>{{createdAt}}</span>
            </div>
            <div class="message-body">
                <p>{{text}}</p>
            </div>
        </li>
    </script>
    <script type="text/template" id="location-message-template">
        <li class="message">
            <div class="message_title">
                <h4>
                    {{from}}
                </h4>
                <span>{{createdAt}}</span>
            </div>
            <div class="message-body">
                <a href="{{url}}">MY current location</a>
            </div>
        </li>
    </script>
    <script src="/socket.io/socket.io.js"></script>
    <script type="text/javascript" src='/js/index.js'></script>
    <script type="text/javascript" src='/js/libs/moment.js'></script>
    <script type="text/javascript" src='/js/libs/mustache.js'></script>


</body>

</html>

    ///Navigattor geolocation is not workiing
    // navigator.geolocation.getCurrentPosition(function(position) {
    //     if (position) {
    //         socket.emit('createLocationMessage', {
    //             lat: position.coords.latitude,
    //             lng: position.coords.longitude
    //         })
    //     } else {
    //         return alert('Geolocation is not supported by your browser.')
    //     }

    // }, function() {
    //     alert('Unable to fetch location.')
    // })



socket.on("connect", function() {
    let searchQuery = window.location.search.substring(1);
    let params = JSON.parse('{"' + decodeURI(searchQuery).replace(/&/g, '","').replace(/\+/g, ' ').replace(/=/g, '":"') + '"}');
    console.trace()
    console.log(params)

    socket.emit("join", params, (err) => {
        if (err) {
            alert("input field must be a valid", err)
            window.location.href = "/";
        } else {
            console.log('No Error');
        }
    })
    console.log("Connected to server ")
});


let socket = io();

function scrollToBottom() {
    let messages = document.querySelector("#messages").lastElementChild;
    messages.scrollIntoView();
}


socket.on('connect', function() {
    let searchQuery = window.location.search.substring(1);
    let params = JSON.parse('{"' + decodeURI(searchQuery).replace(/&/g, '","').replace(/\+/g, ' ').replace(/=/g, '":"') + '"}');

    socket.emit('join', params, function(err) {
        if (err) {
            alert(err);
            window.location.href = '/';
        } else {
            console.log('No Error');
        }
    })
});

socket.on("disconnect ", function() {
    console.log("Disconnected from server ");
});

socket.on('updateUsersList', function(users) {
    let ol = document.createElement('ol');

    users.forEach(function(user) {
        let li = document.createElement('li');
        li.innerHTML = user;
        ol.appendChild(li);
    });

    let usersList = document.querySelector('#users');
    usersList.innerHTML = "";
    usersList.appendChild(ol);
})

socket.on('newMessage', function(message) {
    const formattedTime = moment(message.createdAt).format('LT');
    const template = document.querySelector('#message-template').innerHTML;
    const html = Mustache.render(template, {
        from: message.from,
        text: message.text,
        createdAt: formattedTime
    });

    const div = document.createElement('div');
    div.innerHTML = html

    document.querySelector('#messages').appendChild(div);
    scrollToBottom();
});

socket.on('newLocationMessage', function(message) {
    const formattedTime = moment(message.createdAt).format('LT');
    console.log("newLocationMessage", message);

    const template = document.querySelector('#location-message-template').innerHTML;
    const html = Mustache.render(template, {
        from: message.from,
        url: message.url,
        createdAt: formattedTime
    });

    const div = document.createElement('div');
    div.innerHTML = html

    document.querySelector('#messages').appendChild(div);
    scrollToBottom();
});




document.querySelector('#submit-btn').addEventListener('click', (e) => {
    e.preventDefault();

    socket.emit("createMessage", {
        text: document.querySelector('input[name="message"]').value
    }, function() {
        document.querySelector('input[name="message"]').value = '';
    })
})

document.querySelector('#send-location').addEventListener('click', function(e) {
    if (!navigator.geolocation) {
        return alert('Geolocation is not supported by your browser.')
    }
    20.932118, 72.927188
    socket.emit('createLocationMessage', {
        lat: 20.932118,
        lng: 72.927188
    })


});



const path = require('path');
const http = require('http');
const express = require('express');
const socketIO = require('socket.io');

const { Navigator } = require("node-navigator");
const { generateMessage, generateLocationMessage } = require('./utils/message');
const { isRealString } = require('./utils/isRealString');
const { isDuration } = require('moment');
const { Users } = require('./utils/users')

const publicPath = path.join(__dirname, '/../public/');
const PORT = process.env.PORT || 4000;
const navigator = new Navigator();
let app = express();
let server = http.createServer(app);
let io = socketIO(server);
let users = new Users();

app.use(express.static(publicPath));

io.on('connection', (socket) => {
    console.log("A new User just connected");


    socket.on('join', (params, callback) => {
        if (!isRealString(params.name) || !isRealString(params.room)) {
            callback('Name and room are required ')
        }
        console.log(params)
        socket.join('params.room');
        users.removeUser(socket.id);
        users.addUser(socket.id, params.name, params.room);

        io.to(params.room).emit('udateUserList', users.getUserList(params.room))
        socket.emit('newMessage', generateMessage('Admin', `Welcome to the ${params.room}`));

        socket.broadcast.to(params.room).emit('newMessage', generateMessage('Admin', `A new user has joined in ${params.room}`));


    })

    socket.on('createMessage', (message, callback) => {
        let user = users.getUser(socket.id);

        if (user && isRealString(message.text)) {
            io.to(user.room).emit('newMessage', generateMessage(user.name, message.text));
        }
        callback('This is the server:');
    })

    socket.on('createLocationMessage', (coords) => {
        let user = users.getUser(socket.id);

        if (user) {
            io.to(user.room).emit('newLocationMessage', generateLocationMessage(user.name, coords.lat, coords.lng))
        }
        callback('This is the server:');
    })

    socket.on('disconnect', () => {
        let user = users.removeUser(socket.id);

        if (user) {
            io.to(user.room).emit('updateUsersList', users.getUserList(user.room));
            io.to(user.room).emit('newMessage', generateMessage('Admin', `${user.name} has left ${user.room} chat room.`))
        }
    });

});

server.listen(PORT, () => {
    console.log(`running on ${PORT}`)
})